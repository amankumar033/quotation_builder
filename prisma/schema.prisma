generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////
// NextAuth Models      //
//////////////////////////
model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//////////////////////////
// User & Agency Models //
//////////////////////////

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  password        String?   // null if login with Google only
  image           String?
  role            Role      @default(EXECUTIVE)
  agencyId        String?
  agency          Agency?   @relation(fields: [agencyId], references: [id])
  accounts        Account[]
  sessions        Session[]
  loginHistory    LoginHistory[]   // <-- add this line
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}


enum Role {
  SUPERADMIN
  AGENCYADMIN
  EXECUTIVE
}

model Agency {
  id         String      @id @default(cuid())
  name       String
  logo       String?
  settings   Json?       // default markup, GST toggle, rounding rules, terms
  users      User[]
  clients    Client[]
  quotations Quotation[]
  hotels     Hotel[]
  cars       Car[]
  meals      Meal[]
  activities Activity[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

//////////////////////////
// Client & Quotation   //
//////////////////////////

model Client {
  id         String      @id @default(cuid())
  name       String
  email      String?
  phone      String?
  city       String?
  notes      String?
  agencyId   String
  agency     Agency      @relation(fields: [agencyId], references: [id])
  quotations Quotation[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Quotation {
  id          String          @id @default(cuid())
  clientId    String
  client      Client          @relation(fields: [clientId], references: [id])
  agencyId    String
  agency      Agency          @relation(fields: [agencyId], references: [id])
  status      QuotationStatus @default(PENDING)
  destination String
  startDate   DateTime
  endDate     DateTime
  adults      Int
  children    Int
  infants     Int
  items       QuotationItem[]
  itineraries Itinerary[]
  totalAmount Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum QuotationStatus {
  PENDING
  SENT
  WON
  LOST
}

model QuotationItem {
  id          String      @id @default(cuid())
  quotationId String
  quotation   Quotation   @relation(fields: [quotationId], references: [id])
  serviceType ServiceType
  serviceId   String
  description String?
  price       Float
}

enum ServiceType {
  HOTEL
  CAR
  MEAL
  ACTIVITY
}

//////////////////////////
// Services             //
//////////////////////////

model Hotel {
  id           String  @id @default(cuid())
  name         String
  city         String
  starCategory Int
  roomTypes    Json     // e.g. [{ type: "Deluxe", price: 5000 }]
  inclusions   String?
  cancellation String?
  photos       Json?
  agencyId     String
  agency       Agency   @relation(fields: [agencyId], references: [id])
}

model Car {
  id           String  @id @default(cuid())
  vehicleType  String
  pricingModel String // Per Day / Per Km
  maxCapacity  Int
  notes        String?
  photos       Json?
  agencyId     String
  agency       Agency   @relation(fields: [agencyId], references: [id])
}

model Meal {
  id        String  @id @default(cuid())
  type      String // Breakfast / Lunch / Dinner
  vegOption Boolean
  price     Float
  agencyId  String
  agency    Agency   @relation(fields: [agencyId], references: [id])
}

model Activity {
  id          String  @id @default(cuid())
  name        String
  description String?
  duration    String? // Half-day / Full-day
  price       Float
  photos      Json?
  agencyId    String
  agency      Agency   @relation(fields: [agencyId], references: [id])
}

//////////////////////////
// Itineraries          //
//////////////////////////

model Itinerary {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  dayNumber   Int
  headline    String
  description String?
  duration    String?
  notes       String?
  images      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}