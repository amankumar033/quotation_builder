generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ///////////////////////
/// ///////////////////////
model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role           @default(EXECUTIVE)
  agencyId      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  loginHistory  LoginHistory[]
  sessions      Session[]
  agency        Agency?        @relation(fields: [agencyId], references: [id])
}

model Agency {
  id         String      @id @default(cuid())
  name       String
  logo       String?
  settings   Json?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  activities Activity[]
  transport  Transport[]
  clients    Client[]
  hotels     Hotel[]
  meals      Meal[]
  quotations Quotation[]
  users      User[]
}

model Client {
  id         String      @id @default(cuid())
  name       String
  email      String?
  phone      String?
  city       String?
  notes      String?
  agencyId   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  agency     Agency      @relation(fields: [agencyId], references: [id])
  quotations Quotation[]
}

model Quotation {
  id          String          @id @default(cuid())
  clientId    String
  agencyId    String
  status      QuotationStatus @default(PENDING)
  destination String
  startDate   DateTime
  endDate     DateTime
  adults      Int
  children    Int
  infants     Int
  totalAmount Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  itineraries Itinerary[]
  agency      Agency          @relation(fields: [agencyId], references: [id])
  client      Client          @relation(fields: [clientId], references: [id])
  items       QuotationItem[]
}

model QuotationItem {
  id          String      @id @default(cuid())
  quotationId String
  serviceType ServiceType
  serviceId   String
  description String?
  price       Float
  quotation   Quotation   @relation(fields: [quotationId], references: [id])
}

/// ///////////////////////
/// ///////////////////////
model RoomType {
  id      String  @id @default(cuid())
  type    String
  price   Decimal
  hotelId String
  hotel   Hotel   @relation(fields: [hotelId], references: [id])
}

model Hotel {
  id           String     @id @default(cuid())
  name         String
  city         String
  starCategory Int
  inclusions   String?
  cancellation String?
  photos       String?
  agencyId     String
  agency       Agency     @relation(fields: [agencyId], references: [id])
  roomTypes    RoomType[]
}

model Transport {
  id          String  @id @default(cuid())
  vehicleType String
  perDay      Float // use Float or Decimal for prices
  perKm       Float
  maxCapacity Int
  notes       String?
  photos      String?
  agencyId    String
  agency      Agency  @relation(fields: [agencyId], references: [id])
}

model Meal {
  id           String  @id @default(cuid())
  type         String
  vegOption    Boolean
  nonVegOption Boolean
  price        Float
  agencyId     String
  agency       Agency  @relation(fields: [agencyId], references: [id])
}

model Activity {
  id          String  @id @default(cuid())
  name        String
  description String?
  duration    String?
  price       Float
  photos      Json?
  agencyId    String
  agency      Agency  @relation(fields: [agencyId], references: [id])
}

model Itinerary {
  id          String    @id @default(cuid())
  quotationId String
  dayNumber   Int
  headline    String
  description String?
  duration    String?
  notes       String?
  images      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  quotation   Quotation @relation(fields: [quotationId], references: [id])
}

enum Role {
  SUPERADMIN
  AGENCYADMIN
  EXECUTIVE
}

enum QuotationStatus {
  PENDING
  SENT
  WON
  LOST
}

enum ServiceType {
  HOTEL
  CAR
  MEAL
  ACTIVITY
}
